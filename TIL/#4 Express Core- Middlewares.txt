Express에서 middleware란 간단하게 말하면 처리가 끝날 때 까지 연결되어있는 것이다.

말이 약간 어색한데, 이해해야 할 것은 우선 어떻게 연결이 시작되는것이냐이다.

request가 어떻게 시작되는지..

시작은 브라우저에서부터 시작한다.

웹사이트에 접속하려고할때 그 때가 시작이다.

시작되면 index파일을 실행할테고 우리의 application이 route가 존재하는지 살핀다.

예를들어 localhost:4000으로 웹사이트를 요청하면

"/" 에 먼저 요청을한다. 그러면 브라우저는 "home을 요청하는구나" 로 해석하고,

handleHome 함수를 호출한다.

그러면 handleHome은 응답을 전송한다.

보통 연결, 그 흐름은 이렇게 간단히 되진 않는다.

보통 어떤 과정을 거치나면 
 
유저와 마지막 응답 사이에 뭔가 있게된다.

이 사이에 있는 뭔가를 middleware 라고 한다.

다시말해, 라우팅 후, 콜백함수 사이에서 동작할 함수. 즉, 사이에 있는 함수이다.

그리고 Express에서의 모든 함수는 middleware가 될 수 있다.

#####

middleware가 어떻게 동작하는지 다음 코드를 보자.

const betweenHome = () => console.log("I'm between");

app.get("/", betweenHome, handleHome);

유저가 home을 요청하고, handleHome 함수를 호출하는 사이에 betweenHome 함수 호출

but, betweenHome 함수를 위처럼만 짜게되면, 요청을 계속 처리할 지에 대해 권한을 주지 않았기 때문에

계속 로딩하는 상태를 가지게된다.

이를 처리하려면 next 라는 key를 줘서 처리해야한다.

const betweenHome = (req, res, next) => {
    console.log('Between');
    next();
}

원한다면 여러개의 middleware를 가질 수 도 있다.

이를 활용하여, 유저의 로그인 여부를 체크할 수도 있다.

#####

지금 까지는 middleware를 하나의 route에만 사용했었는데, 모두 적용하려면

app.use 를 이용한다.
app.use(betweenHome);

* middleware는 route 위에 위치시켜야한다.


#####

- 요약

middleware

라우팅 후, 콜백함수 사이에서 동작할 함수. 즉, 사이에 있는 함수.

주의 : next()가 꼭 필요하다 !! 안그럼 다음에 실행할 콜백함수가 실행하지 못할거야!!

각개적용 = 라우팅 - 콜백 사이에 직접 위치해줌.

모두적용 = app.use () 로 적용해주고, 해당 코드 아래에 있는 모든 코드에 적용됨.