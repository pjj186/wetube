바벨이란?
- 신코드(ES6~)를 이용할 수 있게 해주는 모듈(?) 이며, 브라우저에서 동작할 때 다시 신코드를 구 코드로 변환해주는 역할을 함.
- @babel/node & @babel/preset & @babel/core 를 요구함.


#####

function handleProfile(req, res) {
    res.send("You are on my profile");
}

이 함수를 아래와 같이 표현 할 수 있다.

const handleProfile = (req, res) => res.send("You are on my profile");

이렇게 표현하는것을 Arrow Fucntion(화살표 함수) 이라고한다.

#####
지금까지 실습하면서 코드를 업데이트하면 새로 업데이트 된 결과를 보기위해 서버를 수동으로 재시작 해줬다.

이 과정을 좀 더 편리하게 하기위해 nodemon 이라는 패키지를 설치한다.

우선 nodemon을 설치하기전에 알아야 할 것이 있는데

패키지를 dependency와 별개로 설치하는 방법이다.

 * dependency : 프로젝트가 실행되려면 필요한 것

nodemon을 설치할건데 이것을 dependency에 포함하지않고 설치하려면, 
(why? nodemon은 프로젝트가 실행되려면 필요한 것이 아니라, 프로그래머에게 필요한 것이니까)

npm install nodemon -D 를 입력하여 설치해주면,

package.json에 새로운 entrypoint로 devDependency 라는게 생긴다.

이것이 의미하는건 프로젝트에 필요한 것이 아닌, 개발자에게 필요한 것 이라는 의미이다.

  "scripts": {
    "start": "babel-node index.js"
  }

  이 부분을

  "scripts": {
    "start": "nodemon --exec babel-node index.js"
  } 
  
  로 수정하고 실행해주게되면, 파일을 수정하고 저장할 때 마다 서버를 새로 실행하게 된다.

  이제 매번 껐다 켰다 수동으로 해 줄 필요가 없는것!

  그런데 여기 사소한 문제점이 하나 있는데, 저장할때 마다 서버를 두 번 씩 재시작하게되는데

  이 이유는 변경된 코드를 저장할때 한번 재시작하고, 그 다음 Bable이 코드의 변화를 확인하고 다시 재시작 하게 되는것이다.

  이를 해결하려면

  "scripts": {
    "start": "nodemon --exec babel-node index.js --delay 2"
  }

  delay를 주면된다. delay를 이렇게 주게되면, 저장할 때 마다 2초를 기다렸다가 서버를 시작하는데,

  이렇게 해주면 Babel이 코드를 변환할 때 까지 기다릴 수 있는것이다.